#*****************************************************************;
#put all the scaled items together
data0100 <- IDINFO %>%
inner_join(RFIVEPT, by = "ptid") %>%
inner_join(THREEPT, by = "ptid") %>%
inner_join(TWOPT,   by = "ptid") %>%
inner_join(RSIXPT,  by = "ptid") %>%
inner_join(SIXPT,   by = "ptid") %>%
inner_join(FIVEPT,  by = "ptid") %>%
inner_join(I1SF,    by = "ptid") %>%
inner_join(I21SF,   by = "ptid") %>%
inner_join(I22SF,   by = "ptid")
#calculate scales by taking means of select 0-100 scaled items
# 8 SF-36 scale scores
## Physical Health
# Physical functioning, 10 items:	3 4 5 6 7 8 9 10 11 12
# Role limitations due to physical health,	4 items:	13 14 15 16
# Pain,	2 items:	21 22
# General health,	5 items:	1 33 34 35 36
## Mental Health
# Energy/fatigue/vitality,	4 items:	23 27 29 31
# Social functioning,	2	items: 20 32
# Role limitations due to emotional problems,	3 items:	17 18 19
# Emotional well-being,	5	items: 24 25 26 28 30
# SF-36 physical and mental health composite scores
data0100 <- mutate(data0100,
##Physical Composite Scale
# Physical functioning, 10 items:	3 4 5 6 7 8 9 10 11 12
PHYFUN10 = rowMeans(select(data0100,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12),na.rm = TRUE),
# Role limitations due to physical health,	4 items:	13 14 15 16
ROLEP4 = rowMeans(select(data0100,I13,I14,I15,I16),na.rm = TRUE),
# Pain,	2 items:	21 22
PAIN2 = rowMeans(select(data0100,I21,I22),na.rm = TRUE),
SFPAIN = rowMeans(select(data0100,I21SF,I22SF),na.rm = TRUE),
# General health,	5 items:	1 33 34 35 36
GENH5 = rowMeans(select(data0100,I1,I33,I34,I35,I36),na.rm = TRUE),
SFGENH5 = rowMeans(select(data0100,I1SF,I33,I34,I35,I36),na.rm = TRUE),
##Mental Composite Scale
# Energy/fatigue,	4 items:	23 27 29 31
ENFAT4 = rowMeans(select(data0100,I23,I27,I29,I31),na.rm = TRUE),
# Social functioning,	2	items: 20 32
SOCFUN2 = rowMeans(select(data0100,I20,I32),na.rm = TRUE),
# Role limitations due to emotional problems,	3 items:	17 18 19
ROLEE3 = rowMeans(select(data0100,I17,I18,I19),na.rm = TRUE),
# Emotional well-being,	5	items: 24 25 26 28 30
EMOT5 = rowMeans(select(data0100,I24,I25,I26,I28,I30),na.rm = TRUE)
)
#select 8 SF-36 subscale scores
subScale8 <- select(data0100, ptid,
PHYFUN10,ROLEP4,PAIN2,GENH5,
ENFAT4,SOCFUN2,ROLEE3,EMOT5)
test <- summarize(subScale8,
meanPF = mean(PHYFUN10), sdPF = sd(PHYFUN10),
meanRP = mean(ROLEP4), sdRP = sd(ROLEP4),
meanBP = mean(PAIN2), sdBP = sd(PAIN2),
meanGH = mean(GENH5), sdGH = sd(GENH5),
meanVT = mean(ENFAT4), sdVT = sd(ENFAT4),
meanSF = mean(SOCFUN2), sdSF = sd(SOCFUN2),
meanRE = mean(ROLEE3), sdRE = sd(ROLEE3),
meanMH = mean(EMOT5), sdMH = sd(EMOT5)
)
#make this into a tibble of each subscale (rows) by statistics mean and sd.
as.numeric(test[1,]) %>%
as.matrix(ncol = 2, nrow = 8) %>%
as.tibble()
knitr::opts_chunk$set(echo = TRUE)
#R packages
library(readxl)
library(dplyr)
library(stringr)
#set working directory
knitr::opts_knit$set(root.dir = normalizePath("/Users/USC/Desktop/SF-36"))
#show working directory path
getwd()
#import from excel to R using readxl
data <- read_excel("DataSF36.xlsx")
#save a record of the original data for reference
data_orig <- data
#look at item variables and number of observations
glimpse(data)
#rename the columns
cols <- c("timestamp", "ptid", "intid", paste0("I", 1:36))
colnames(data) <- cols
#save dataset with I1:I36 variables as strings
data_str <- data
#recode answers to numerics
##get the first character digit in each string (the number score value)
data_1str <- sapply(X = data[,4:39], FUN = substr, start = 1, stop = 1)
##make new data frame where SF-36 scores are numeric (not factor)
data <- cbind(data_str[,1:3], data.frame(data_1str, stringsAsFactors = TRUE))
data <- as.data.frame(lapply(data, function(x) {
if(is.factor(x)) as.numeric(as.character(x)) else x
}))
##convert data to tible
data <- tbl_df(data)
#data_1num <- mutate_all(.tbl = data_1str, .vars = 4:39, function(x) as.numeric())
#score from Ron Hays instructions
#*****************************************************************;
##Assign arrays for recoding each item in approptiate direction and converting to 0 to 100 scale
IDINFO  <- select(data, timestamp, ptid, intid)
RFIVEPT <- select(data, ptid,  I1,  I2, I20, I22, I34,  I36)
THREEPT <- select(data, ptid,  I3,  I4,  I5,  I6,  I7,   I8,  I9, I10, I11, I12)
TWOPT   <- select(data, ptid, I13, I14, I15, I16, I17,  I18, I19)
RSIXPT  <- select(data, ptid, I21, I23, I26, I27, I30)
SIXPT   <- select(data, ptid, I24, I25, I28, I29, I31)
FIVEPT  <- select(data, ptid, I32, I33, I35)
#*****************************************************************;
##sf items (recoded in next section below)
I1SF  <- select(data, ptid, I1)
I21SF <- select(data, ptid, I21)
I22SF <- select(data, ptid, I22)
##recode, reverse 5-point items to 0-100 scale
RFIVEPT[,2:7] <- sapply(X = RFIVEPT[,2:7], FUN = function(x) {
x[x == 1] <- 100
x[x == 2] <- 75
x[x == 3] <- 50
x[x == 4] <- 25
x[x == 5] <- 0
x
})
##recode 3-point items to 0-100 scale
THREEPT[,2:11] <- sapply(X = THREEPT[,2:11], FUN = function(x) {
x[x == 1] <- 0
x[x == 2] <- 50
x[x == 3] <- 100
x
})
##recode 2-point items to 0-100 scale
TWOPT[,2:8] <- sapply(X = TWOPT[,2:8], FUN = function(x) {
x[x == 1] <- 0
x[x == 2] <- 100
x
})
##recode, reverse 6-point items to 0-100 scale
RSIXPT[,2:6] <- sapply(X = RSIXPT[,2:6], FUN = function(x) {
x[x == 1] <- 100
x[x == 2] <- 80
x[x == 3] <- 60
x[x == 4] <- 40
x[x == 5] <- 20
x[x == 6] <- 0
x
})
##recode 6-point items to 0-100 scale
SIXPT[,2:6] <- sapply(X = SIXPT[,2:6], FUN = function(x) {
x[x == 1] <- 0
x[x == 2] <- 20
x[x == 3] <- 40
x[x == 4] <- 60
x[x == 5] <- 80
x[x == 6] <- 100
x
})
##recode 5-point items to 0-100 scale
FIVEPT[,2:4] <- sapply(X = FIVEPT[,2:4], FUN = function(x) {
x[x == 1] <- 0
x[x == 2] <- 25
x[x == 3] <- 50
x[x == 4] <- 75
x[x == 5] <- 100
x
})
#*****************************************************************;
##recode sf items to 0-100 scale
###original SF item scores
before <- I1SF %>%
inner_join(I21SF, by = "ptid") %>%
inner_join(I22SF, by = "ptid")
###recode item 1 to 0-100 scale
####initialize new column for scaled values
I1SF$I1SF <- NA
####recode scores
I1SF$I1SF[I1SF$I1 == 1] <- 5.0
I1SF$I1SF[I1SF$I1 == 2] <- 4.4
I1SF$I1SF[I1SF$I1 == 3] <- 3.4
I1SF$I1SF[I1SF$I1 == 4] <- 2.0
I1SF$I1SF[I1SF$I1 == 5] <- 1.0
#scale
I1SF$I1SF <- (I1SF$I1SF - 1) * 25
###recode item 22 to 0-100 scale, depending on value of item 21
#####note: use single ampersand so each row is tested (vectorized), not just the first element
for (row in 1:nrow(before)) {
if (!is.na(before$I21[row]) && !is.na(before$I22[row])) {
#####if no missing values for item 21 and 22, item 22 has 6 levels for 0-100 score
I22SF$I22[before$I22 == 1 &  before$I21 == 1] <- 6
I22SF$I22[before$I22 == 1 & (before$I21 > 1 & before$I21 < 7)] <- 5
I22SF$I22[before$I22 == 2 & (before$I21 > 0 & before$I21 < 7)] <- 4
I22SF$I22[before$I22 == 3 & (before$I21 > 0 & before$I21 < 7)] <- 3
I22SF$I22[before$I22 == 4 & (before$I21 > 0 & before$I21 < 7)] <- 2
I22SF$I22[before$I22 == 5 & (before$I21 > 0 & before$I21 < 7)] <- 1
} else if (is.na(before$I21[row]) && !is.na(before$I22[row])) {
#####if missing values for item 21, but not item 22, item 22 has 5 levels for 0-100 score
I22SF$I22[before$I22 == 1] <- 6.0
I22SF$I22[before$I22 == 2] <- 4.75
I22SF$I22[before$I22 == 3] <- 3.5
I22SF$I22[before$I22 == 4] <- 2.25
I22SF$I22[before$I22 == 5] <- 1.0
}
}
#scale
I22SF$I22SF <- (I22SF$I22 - 1) * 20
###recode item 21 to 0-100 scale
I21SF$I21[before$I21 == 1] <- 6.0
I21SF$I21[before$I21 == 2] <- 5.4
I21SF$I21[before$I21 == 3] <- 4.2
I21SF$I21[before$I21 == 4] <- 3.1
I21SF$I21[before$I21 == 5] <- 2.2
I21SF$I21[before$I21 == 6] <- 1.0
#scale
I21SF$I21SF <- (I21SF$I21 - 1) * 20
#drop unscaled scores
I1SF$I1   <- NULL
I22SF$I22 <- NULL
I21SF$I21 <- NULL
#get 8 scales, physical and mental subscales
#*****************************************************************;
#put all the scaled items together
data0100 <- IDINFO %>%
inner_join(RFIVEPT, by = "ptid") %>%
inner_join(THREEPT, by = "ptid") %>%
inner_join(TWOPT,   by = "ptid") %>%
inner_join(RSIXPT,  by = "ptid") %>%
inner_join(SIXPT,   by = "ptid") %>%
inner_join(FIVEPT,  by = "ptid") %>%
inner_join(I1SF,    by = "ptid") %>%
inner_join(I21SF,   by = "ptid") %>%
inner_join(I22SF,   by = "ptid")
#calculate scales by taking means of select 0-100 scaled items
# 8 SF-36 scale scores
## Physical Health
# Physical functioning, 10 items:	3 4 5 6 7 8 9 10 11 12
# Role limitations due to physical health,	4 items:	13 14 15 16
# Pain,	2 items:	21 22
# General health,	5 items:	1 33 34 35 36
## Mental Health
# Energy/fatigue/vitality,	4 items:	23 27 29 31
# Social functioning,	2	items: 20 32
# Role limitations due to emotional problems,	3 items:	17 18 19
# Emotional well-being,	5	items: 24 25 26 28 30
# SF-36 physical and mental health composite scores
data0100 <- mutate(data0100,
##Physical Composite Scale
# Physical functioning, 10 items:	3 4 5 6 7 8 9 10 11 12
PHYFUN10 = rowMeans(select(data0100,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12),na.rm = TRUE),
# Role limitations due to physical health,	4 items:	13 14 15 16
ROLEP4 = rowMeans(select(data0100,I13,I14,I15,I16),na.rm = TRUE),
# Pain,	2 items:	21 22
PAIN2 = rowMeans(select(data0100,I21,I22),na.rm = TRUE),
SFPAIN = rowMeans(select(data0100,I21SF,I22SF),na.rm = TRUE),
# General health,	5 items:	1 33 34 35 36
GENH5 = rowMeans(select(data0100,I1,I33,I34,I35,I36),na.rm = TRUE),
SFGENH5 = rowMeans(select(data0100,I1SF,I33,I34,I35,I36),na.rm = TRUE),
##Mental Composite Scale
# Energy/fatigue,	4 items:	23 27 29 31
ENFAT4 = rowMeans(select(data0100,I23,I27,I29,I31),na.rm = TRUE),
# Social functioning,	2	items: 20 32
SOCFUN2 = rowMeans(select(data0100,I20,I32),na.rm = TRUE),
# Role limitations due to emotional problems,	3 items:	17 18 19
ROLEE3 = rowMeans(select(data0100,I17,I18,I19),na.rm = TRUE),
# Emotional well-being,	5	items: 24 25 26 28 30
EMOT5 = rowMeans(select(data0100,I24,I25,I26,I28,I30),na.rm = TRUE)
)
#select 8 SF-36 subscale scores
subScale8 <- select(data0100, ptid,
PHYFUN10,ROLEP4,PAIN2,GENH5,
ENFAT4,SOCFUN2,ROLEE3,EMOT5)
test <- summarize(subScale8,
meanPF = mean(PHYFUN10), sdPF = sd(PHYFUN10),
meanRP = mean(ROLEP4), sdRP = sd(ROLEP4),
meanBP = mean(PAIN2), sdBP = sd(PAIN2),
meanGH = mean(GENH5), sdGH = sd(GENH5),
meanVT = mean(ENFAT4), sdVT = sd(ENFAT4),
meanSF = mean(SOCFUN2), sdSF = sd(SOCFUN2),
meanRE = mean(ROLEE3), sdRE = sd(ROLEE3),
meanMH = mean(EMOT5), sdMH = sd(EMOT5)
)
#make this into a tibble of each subscale (rows) by statistics mean and sd.
as.numeric(test[1,]) %>%
as.matrix(ncol = 2, nrow = 8)
v <- as.numeric(test[1,])
as.matrix(v, ncol = 2, nrow = 8)
knitr::opts_chunk$set(echo = TRUE)
#R packages
library(readxl)
library(dplyr)
library(stringr)
#set working directory
knitr::opts_knit$set(root.dir = normalizePath("/Users/USC/Desktop/SF-36"))
#show working directory path
getwd()
#import from excel to R using readxl
data <- read_excel("DataSF36.xlsx")
#save a record of the original data for reference
data_orig <- data
#look at item variables and number of observations
glimpse(data)
#rename the columns
cols <- c("timestamp", "ptid", "intid", paste0("I", 1:36))
colnames(data) <- cols
#save dataset with I1:I36 variables as strings
data_str <- data
#recode answers to numerics
##get the first character digit in each string (the number score value)
data_1str <- sapply(X = data[,4:39], FUN = substr, start = 1, stop = 1)
##make new data frame where SF-36 scores are numeric (not factor)
data <- cbind(data_str[,1:3], data.frame(data_1str, stringsAsFactors = TRUE))
data <- as.data.frame(lapply(data, function(x) {
if(is.factor(x)) as.numeric(as.character(x)) else x
}))
##convert data to tible
data <- tbl_df(data)
#data_1num <- mutate_all(.tbl = data_1str, .vars = 4:39, function(x) as.numeric())
#score from Ron Hays instructions
#*****************************************************************;
##Assign arrays for recoding each item in approptiate direction and converting to 0 to 100 scale
IDINFO  <- select(data, timestamp, ptid, intid)
RFIVEPT <- select(data, ptid,  I1,  I2, I20, I22, I34,  I36)
THREEPT <- select(data, ptid,  I3,  I4,  I5,  I6,  I7,   I8,  I9, I10, I11, I12)
TWOPT   <- select(data, ptid, I13, I14, I15, I16, I17,  I18, I19)
RSIXPT  <- select(data, ptid, I21, I23, I26, I27, I30)
SIXPT   <- select(data, ptid, I24, I25, I28, I29, I31)
FIVEPT  <- select(data, ptid, I32, I33, I35)
#*****************************************************************;
##sf items (recoded in next section below)
I1SF  <- select(data, ptid, I1)
I21SF <- select(data, ptid, I21)
I22SF <- select(data, ptid, I22)
##recode, reverse 5-point items to 0-100 scale
RFIVEPT[,2:7] <- sapply(X = RFIVEPT[,2:7], FUN = function(x) {
x[x == 1] <- 100
x[x == 2] <- 75
x[x == 3] <- 50
x[x == 4] <- 25
x[x == 5] <- 0
x
})
##recode 3-point items to 0-100 scale
THREEPT[,2:11] <- sapply(X = THREEPT[,2:11], FUN = function(x) {
x[x == 1] <- 0
x[x == 2] <- 50
x[x == 3] <- 100
x
})
##recode 2-point items to 0-100 scale
TWOPT[,2:8] <- sapply(X = TWOPT[,2:8], FUN = function(x) {
x[x == 1] <- 0
x[x == 2] <- 100
x
})
##recode, reverse 6-point items to 0-100 scale
RSIXPT[,2:6] <- sapply(X = RSIXPT[,2:6], FUN = function(x) {
x[x == 1] <- 100
x[x == 2] <- 80
x[x == 3] <- 60
x[x == 4] <- 40
x[x == 5] <- 20
x[x == 6] <- 0
x
})
##recode 6-point items to 0-100 scale
SIXPT[,2:6] <- sapply(X = SIXPT[,2:6], FUN = function(x) {
x[x == 1] <- 0
x[x == 2] <- 20
x[x == 3] <- 40
x[x == 4] <- 60
x[x == 5] <- 80
x[x == 6] <- 100
x
})
##recode 5-point items to 0-100 scale
FIVEPT[,2:4] <- sapply(X = FIVEPT[,2:4], FUN = function(x) {
x[x == 1] <- 0
x[x == 2] <- 25
x[x == 3] <- 50
x[x == 4] <- 75
x[x == 5] <- 100
x
})
#*****************************************************************;
##recode sf items to 0-100 scale
###original SF item scores
before <- I1SF %>%
inner_join(I21SF, by = "ptid") %>%
inner_join(I22SF, by = "ptid")
###recode item 1 to 0-100 scale
####initialize new column for scaled values
I1SF$I1SF <- NA
####recode scores
I1SF$I1SF[I1SF$I1 == 1] <- 5.0
I1SF$I1SF[I1SF$I1 == 2] <- 4.4
I1SF$I1SF[I1SF$I1 == 3] <- 3.4
I1SF$I1SF[I1SF$I1 == 4] <- 2.0
I1SF$I1SF[I1SF$I1 == 5] <- 1.0
#scale
I1SF$I1SF <- (I1SF$I1SF - 1) * 25
###recode item 22 to 0-100 scale, depending on value of item 21
#####note: use single ampersand so each row is tested (vectorized), not just the first element
for (row in 1:nrow(before)) {
if (!is.na(before$I21[row]) && !is.na(before$I22[row])) {
#####if no missing values for item 21 and 22, item 22 has 6 levels for 0-100 score
I22SF$I22[before$I22 == 1 &  before$I21 == 1] <- 6
I22SF$I22[before$I22 == 1 & (before$I21 > 1 & before$I21 < 7)] <- 5
I22SF$I22[before$I22 == 2 & (before$I21 > 0 & before$I21 < 7)] <- 4
I22SF$I22[before$I22 == 3 & (before$I21 > 0 & before$I21 < 7)] <- 3
I22SF$I22[before$I22 == 4 & (before$I21 > 0 & before$I21 < 7)] <- 2
I22SF$I22[before$I22 == 5 & (before$I21 > 0 & before$I21 < 7)] <- 1
} else if (is.na(before$I21[row]) && !is.na(before$I22[row])) {
#####if missing values for item 21, but not item 22, item 22 has 5 levels for 0-100 score
I22SF$I22[before$I22 == 1] <- 6.0
I22SF$I22[before$I22 == 2] <- 4.75
I22SF$I22[before$I22 == 3] <- 3.5
I22SF$I22[before$I22 == 4] <- 2.25
I22SF$I22[before$I22 == 5] <- 1.0
}
}
#scale
I22SF$I22SF <- (I22SF$I22 - 1) * 20
###recode item 21 to 0-100 scale
I21SF$I21[before$I21 == 1] <- 6.0
I21SF$I21[before$I21 == 2] <- 5.4
I21SF$I21[before$I21 == 3] <- 4.2
I21SF$I21[before$I21 == 4] <- 3.1
I21SF$I21[before$I21 == 5] <- 2.2
I21SF$I21[before$I21 == 6] <- 1.0
#scale
I21SF$I21SF <- (I21SF$I21 - 1) * 20
#drop unscaled scores
I1SF$I1   <- NULL
I22SF$I22 <- NULL
I21SF$I21 <- NULL
#get 8 scales, physical and mental subscales
#*****************************************************************;
#put all the scaled items together
data0100 <- IDINFO %>%
inner_join(RFIVEPT, by = "ptid") %>%
inner_join(THREEPT, by = "ptid") %>%
inner_join(TWOPT,   by = "ptid") %>%
inner_join(RSIXPT,  by = "ptid") %>%
inner_join(SIXPT,   by = "ptid") %>%
inner_join(FIVEPT,  by = "ptid") %>%
inner_join(I1SF,    by = "ptid") %>%
inner_join(I21SF,   by = "ptid") %>%
inner_join(I22SF,   by = "ptid")
#calculate scales by taking means of select 0-100 scaled items
# 8 SF-36 scale scores
## Physical Health
# Physical functioning, 10 items:	3 4 5 6 7 8 9 10 11 12
# Role limitations due to physical health,	4 items:	13 14 15 16
# Pain,	2 items:	21 22
# General health,	5 items:	1 33 34 35 36
## Mental Health
# Energy/fatigue/vitality,	4 items:	23 27 29 31
# Social functioning,	2	items: 20 32
# Role limitations due to emotional problems,	3 items:	17 18 19
# Emotional well-being,	5	items: 24 25 26 28 30
# SF-36 physical and mental health composite scores
data0100 <- mutate(data0100,
##Physical Composite Scale
# Physical functioning, 10 items:	3 4 5 6 7 8 9 10 11 12
PHYFUN10 = rowMeans(select(data0100,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12),na.rm = TRUE),
# Role limitations due to physical health,	4 items:	13 14 15 16
ROLEP4 = rowMeans(select(data0100,I13,I14,I15,I16),na.rm = TRUE),
# Pain,	2 items:	21 22
PAIN2 = rowMeans(select(data0100,I21,I22),na.rm = TRUE),
SFPAIN = rowMeans(select(data0100,I21SF,I22SF),na.rm = TRUE),
# General health,	5 items:	1 33 34 35 36
GENH5 = rowMeans(select(data0100,I1,I33,I34,I35,I36),na.rm = TRUE),
SFGENH5 = rowMeans(select(data0100,I1SF,I33,I34,I35,I36),na.rm = TRUE),
##Mental Composite Scale
# Energy/fatigue,	4 items:	23 27 29 31
ENFAT4 = rowMeans(select(data0100,I23,I27,I29,I31),na.rm = TRUE),
# Social functioning,	2	items: 20 32
SOCFUN2 = rowMeans(select(data0100,I20,I32),na.rm = TRUE),
# Role limitations due to emotional problems,	3 items:	17 18 19
ROLEE3 = rowMeans(select(data0100,I17,I18,I19),na.rm = TRUE),
# Emotional well-being,	5	items: 24 25 26 28 30
EMOT5 = rowMeans(select(data0100,I24,I25,I26,I28,I30),na.rm = TRUE)
)
#select 8 SF-36 subscale scores
subScale8 <- select(data0100, ptid,
PHYFUN10,ROLEP4,PAIN2,GENH5,
ENFAT4,SOCFUN2,ROLEE3,EMOT5)
test <- summarize(subScale8,
meanPF = mean(PHYFUN10), sdPF = sd(PHYFUN10),
meanRP = mean(ROLEP4), sdRP = sd(ROLEP4),
meanBP = mean(PAIN2), sdBP = sd(PAIN2),
meanGH = mean(GENH5), sdGH = sd(GENH5),
meanVT = mean(ENFAT4), sdVT = sd(ENFAT4),
meanSF = mean(SOCFUN2), sdSF = sd(SOCFUN2),
meanRE = mean(ROLEE3), sdRE = sd(ROLEE3),
meanMH = mean(EMOT5), sdMH = sd(EMOT5)
)
#make this into a tibble of each subscale (rows) by statistics mean and sd.
v <- as.numeric(test[1,])
as.matrix(v, ncol = 2, nrow = 8)
matrix(v, ncol = 2, nrow = 8)
as.numeric(test[1,]) %>%
matrix(ncol = 2, nrow = 8)
View(test)
as.numeric(test[1,]) %>%
matrix(ncol = 2, nrow = 8, byrow = T)
as.numeric(test[1,]) %>%
matrix(ncol = 2, nrow = 8, byrow = T) %>%
as.tibble
as.numeric(test[1,]) %>%
matrix(ncol = 2, nrow = 8, byrow = T) %>%
as.tibble()
?as.tibble
as.numeric(test[1,]) %>%
matrix(ncol = 2, nrow = 8, byrow = T) %>%
as_tibble()
?matrix
